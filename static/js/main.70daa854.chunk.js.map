{"version":3,"sources":["components/Stream/Stream.tsx","components/Cycler.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Stream","_this$props$source","this","props","source","title","react_default","a","createElement","src","noOpMessage","React","Component","Cycler","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","getSource","bind","assertThisInitialized","state","activeSource","setInterval","cycle","cycleTime","sourceList","setState","cycleIndex","length","components_Stream_Stream","App","className","components_Cycler","SourceList","TEN_SECONDS","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"iqEAkBeA,+LAZP,MAAO,yEAGH,IAAAC,EACsBC,KAAKC,MAAMC,OAA7BA,EADJH,EACIG,OAAQC,EADZJ,EACYI,MAChB,OACIC,EAAAC,EAAAC,cAAA,UAAQH,MAAOA,EAAOI,IAAKL,GAASF,KAAKQ,sBAThCC,IAAMC,YCyCZC,cAvCX,SAAAA,EAAYV,GAAW,IAAAW,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAb,KAAAW,IACnBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAb,KAAAa,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAjB,KAAMC,KACDiB,UAAYN,EAAKM,UAAUC,KAAfN,OAAAO,EAAA,EAAAP,CAAAD,IACjBA,EAAKS,MAAQ,CACTC,aAAc,GAElBC,YAAYX,EAAKY,MAAML,KAAXN,OAAAO,EAAA,EAAAP,CAAAD,IAAuBA,EAAKX,MAAMwB,WAN3Bb,uEASf,IACIc,EAAe1B,KAAKC,MAApByB,WACFJ,EAAiBtB,KAAKqB,MAAtBC,aACNtB,KAAK2B,SAAS,CACXL,aAActB,KAAK4B,WAAWN,EAAcI,EAAWG,6CAI3CP,EAAsBO,GAKrC,QAJAP,IACqBO,IACjBP,EAAe,GAEZA,mCAGF,IACGA,EAAiBtB,KAAKqB,MAAtBC,aACR,OACIlB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACwB,EAAD,CAAQ5B,OAAQF,KAAKkB,UAAUI,wCAKzBA,GACd,OAAOtB,KAAKC,MAAMyB,WAAWJ,UArChBb,IAAMC,kBCaZqB,EARO,WACpB,OACE3B,EAAAC,EAAAC,cAAA,OAAK0B,UAAU,OACb5B,EAAAC,EAAAC,cAAC2B,EAAD,CAAQP,WAAYQ,EAAYT,UALnBU,QCNbC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAqCN,SAASC,EAAgBC,EAAeC,GACtCC,UAAUC,cACPC,SAASJ,GACTK,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB9B,QACfwB,UAAUC,cAAcQ,YAI1BC,QAAQC,IACN,iHAKEZ,GAAUA,EAAOa,UACnBb,EAAOa,SAASR,KAMlBM,QAAQC,IAAI,sCAGRZ,GAAUA,EAAOc,WACnBd,EAAOc,UAAUT,UAO5BU,MAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,KC7EjEC,IAASC,OAAO1D,EAAAC,EAAAC,cAACyD,EAAD,MAASC,SAASC,eAAe,SDS1C,SAAkBrB,GACvB,GAA6C,kBAAmBC,UAAW,CAKzE,GAJkB,IAAIqB,IACnBC,6BACD7B,OAAOC,SAAS6B,MAEJC,SAAW/B,OAAOC,SAAS8B,OACvC,OAGF/B,OAAOgC,iBAAiB,OAAQ,WAC9B,IAAM3B,EAAK,GAAA4B,OAAMJ,6BAAN,sBAEP/B,GA2DV,SAAiCO,EAAeC,GAE9C4B,MAAM7B,GACHK,KAAK,SAAAyB,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5CjC,UAAUC,cAAciC,MAAM/B,KAAK,SAAAC,GACjCA,EAAa+B,aAAahC,KAAK,WAC7BV,OAAOC,SAAS0C,aAKpBvC,EAAgBC,EAAOC,KAG1Be,MAAM,WACLJ,QAAQC,IACN,mEAjFA0B,CAAwBvC,EAAOC,GAC/BC,UAAUC,cAAciC,MAAM/B,KAAK,WACjCO,QAAQC,IACN,gHAKJd,EAAgBC,EAAOC,MC9B/BE","file":"static/js/main.70daa854.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Stream.css';\r\n\r\nclass Stream extends React.Component<StreamProps> {\r\n\r\n    noOpMessage(){\r\n        return \"Your browser doesn't support iFrames.\";\r\n    }\r\n\r\n    render(){\r\n        const { source, title } = this.props.source;\r\n        return (\r\n            <iframe title={title} src={source}>{this.noOpMessage()}</iframe>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Stream;","import React from 'react';\r\nimport Stream from './Stream/Stream';\r\n\r\nclass Cycler extends React.Component<CyclerProps, CyclerState> {\r\n\r\n    constructor(props: any){\r\n        super(props);\r\n        this.getSource = this.getSource.bind(this);\r\n        this.state = {\r\n            activeSource: 0\r\n        }\r\n        setInterval(this.cycle.bind(this), this.props.cycleTime);\r\n    }\r\n    \r\n    cycle() {\r\n        const { sourceList } = this.props;\r\n        let { activeSource } = this.state;\r\n        this.setState({\r\n           activeSource: this.cycleIndex(activeSource, sourceList.length) \r\n        });\r\n    }\r\n\r\n    private cycleIndex(activeSource: number, length: number) {\r\n        activeSource++;\r\n        if (activeSource === length) {\r\n            activeSource = 0;\r\n        }\r\n        return activeSource;\r\n    }\r\n\r\n    render() {\r\n        const { activeSource } = this.state;\r\n        return (\r\n            <div>\r\n                <Stream source={this.getSource(activeSource)} />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getSource(activeSource: number) {\r\n        return this.props.sourceList[activeSource];\r\n    }\r\n}\r\n\r\nexport default Cycler;","import React from 'react';\r\nimport './App.css';\r\nimport Cycler from './components/Cycler';\r\nimport SourceList from './source-list.json';\r\n\r\nconst TEN_SECONDS = 10000;\r\nconst ONE_MINUTE = TEN_SECONDS * 6;\r\nconst cycleTime = ONE_MINUTE;\r\nconst App: React.FC = () => {\r\n  return (\r\n    <div className=\"App\">\r\n      <Cycler sourceList={SourceList} cycleTime={cycleTime}/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        checkValidServiceWorker(swUrl, config);\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nserviceWorker.register();"],"sourceRoot":""}