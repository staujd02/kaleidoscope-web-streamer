{"version":3,"sources":["LoadScreen/kaleidoscope-2.svg","Stream/Stream.tsx","TimeDisplay/TimeDisplay.tsx","Cycler/Cycler.tsx","LoadScreen/LoadScreen.tsx","Loader/Loader.tsx","App/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","__webpack_require__","p","Stream","_this$props$source","this","props","source","title","react_default","a","createElement","allow","src","noOpMessage","React","Component","TimeDisplay","time","secondsRemaining","calcSeconds","minutesRemaining","calcMinutes","className","concat","milSecondsRemaining","format","Math","floor","numberToFormat","str","substring","length","Cycler","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","getSource","bind","assertThisInitialized","state","activeSource","millisecondsRemaining","cycleTime","sourceList","setState","cycleIndex","nextRemainingCycle","cycle","_this2","_this$state","setTimeout","tick","src_Stream_Stream","src_TimeDisplay_TimeDisplay","LoadScreen","logo","alt","Loader","doneLoading","finishedLoading","component","src_LoadScreen_LoadScreen","parseInt","process","goFullScreen","div","document","getElementById","requestFullscreen","App","src_Cycler_Cycler","SourceList","onClick","src_Loader_Loader","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_App","URL","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.fed1b49a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/kaleidoscope-2.69382820.svg\";","import React from 'react';\r\nimport './Stream.css';\r\n\r\nclass Stream extends React.Component<StreamProps> {\r\n\r\n    noOpMessage(){\r\n        return \"Your browser doesn't support iFrames.\";\r\n    }\r\n\r\n    render(){\r\n        const { source, title } = this.props.source;\r\n        return (\r\n            <iframe title={title} allow={\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"} src={source}>{this.noOpMessage()}</iframe>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Stream;","import React from 'react';\r\nimport './TimeDisplay.css';\r\n\r\nclass TimeDisplay extends React.Component<TimeDisplayProps>{\r\n\r\n    render(){\r\n        const { time } = this.props;\r\n        const secondsRemaining = this.calcSeconds(time);\r\n        const minutesRemaining = this.calcMinutes(time);\r\n        return (\r\n            <div className=\"time-display\">\r\n                <div className=\"time-box\">{`${minutesRemaining}:${secondsRemaining}`}</div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private calcMinutes(milSecondsRemaining: number) {\r\n        return this.format(Math.floor(milSecondsRemaining / 60000));\r\n    }\r\n\r\n    private calcSeconds(milSecondsRemaining: number) {\r\n        return this.format(Math.floor((milSecondsRemaining % 60000) / 1000));\r\n    }\r\n\r\n    private format(numberToFormat: number): string {\r\n        var str = \"\" + numberToFormat;\r\n        var pad = \"00\";\r\n        return pad.substring(0, pad.length - str.length) + str;\r\n    }\r\n}\r\n\r\nexport default TimeDisplay;","import React from 'react';\r\nimport Stream from '../Stream/Stream';\r\nimport TimeDisplay from '../TimeDisplay/TimeDisplay';\r\n\r\nclass Cycler extends React.Component<CyclerProps, CyclerState> {\r\n\r\n    constructor(props: any){\r\n        super(props);\r\n        this.getSource = this.getSource.bind(this);\r\n        this.state = {\r\n            activeSource: 0,\r\n            millisecondsRemaining: this.props.cycleTime\r\n        }\r\n    }\r\n    \r\n    cycle(sourceList: Array<Source>, activeSource: number) {\r\n        this.setState({\r\n           activeSource: this.cycleIndex(activeSource, sourceList.length),\r\n           millisecondsRemaining: this.props.cycleTime\r\n        });\r\n    }\r\n\r\n    tick(sourceList: Array<Source>, activeSource: number) {\r\n        const { millisecondsRemaining } = this.state;\r\n        let nextRemainingCycle = millisecondsRemaining - 1000;\r\n        if (nextRemainingCycle > 1000)\r\n            this.setState({\r\n                millisecondsRemaining: nextRemainingCycle\r\n            });\r\n        else\r\n            this.cycle.bind(this)(sourceList, activeSource);\r\n    }\r\n\r\n    private cycleIndex(activeSource: number, length: number) {\r\n        activeSource++;\r\n        if (activeSource === length) {\r\n            activeSource = 0;\r\n        }\r\n        return activeSource;\r\n    } \r\n\r\n    render() {\r\n        const { activeSource, millisecondsRemaining } = this.state;\r\n        const { sourceList } = this.props;\r\n        setTimeout(() => this.tick(sourceList, activeSource), 1000);\r\n        return (\r\n            <div>\r\n                <Stream source={this.getSource(activeSource)} />\r\n                <TimeDisplay time={millisecondsRemaining} />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getSource(activeSource: number) {\r\n        return this.props.sourceList[activeSource];\r\n    }\r\n}\r\n\r\nexport default Cycler;","import React from 'react';\r\nimport logo from './kaleidoscope-2.svg';\r\n\r\nconst LoadScreen: React.FC = () => \r\n    <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <p>Starting Up The Streams...</p>\r\n    </header>\r\n\r\nexport default LoadScreen;","import React from 'react';\r\nimport LoadScreen from '../LoadScreen/LoadScreen';\r\n\r\nclass Loader extends React.Component<LoaderProps, LoaderState> {\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            doneLoading: false\r\n        }\r\n        setTimeout(this.finishedLoading.bind(this), 5000);\r\n    }\r\n\r\n    finishedLoading(){\r\n        this.setState({\r\n            doneLoading: true\r\n        });\r\n    }\r\n\r\n    render(){\r\n        const { doneLoading } = this.state;\r\n        const { component } = this.props; \r\n        return (\r\n            <div>\r\n                {!doneLoading && <LoadScreen />}\r\n                {doneLoading && component}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Loader;","import React from 'react';\r\nimport './App.css';\r\nimport Cycler from '../Cycler/Cycler';\r\nimport SourceList from '../source-list.json';\r\nimport Loader from '../Loader/Loader';\r\n\r\nconst TEN_MINUTES = \"600000\";\r\nconst cycleTime = parseInt(process.env.REACT_APP_CYCLE_TIME || TEN_MINUTES);\r\n\r\nconst App: React.FC = () => {\r\n  const cycle = <Cycler sourceList={SourceList} cycleTime={cycleTime} /> as unknown as React.Component;\r\n  return (\r\n    <div className=\"App\" onClick={goFullScreen}>\r\n      <Loader component={cycle} />\r\n    </div>\r\n  );\r\n}\r\n\r\nconst goFullScreen = (): void => {\r\n  let div = document.getElementById(\"root\");\r\n  if (div)\r\n    div.requestFullscreen();\r\n}\r\n\r\nexport default App;\r\n","const isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        checkValidServiceWorker(swUrl, config);\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nserviceWorker.register();"],"sourceRoot":""}